#!/usr/bin/python

from __future__ import print_function

import apt
import apt_inst
import apt_pkg
from argparse import ArgumentParser
import atexit
import errno
import logging
import os
import shutil
import stat
import subprocess
import sys

apt_pkg.init()

DEFAULT_URL = 'http://obs-master.endlessm-sf.com:82/shared/eos'
DEFAULT_SUITE = 'master'
DEFAULT_ARCH = 'i386'
DEFAULT_PLATFORM = 'i386'
DEFAULT_COMPONENTS = 'endless,core'
DEFAULT_KEYRING = '/usr/share/keyrings/eos-archive-keyring.gpg'

def makedirs(name, mode=0o777, exist_ok=False):
    try:
        os.makedirs(name, mode)
    except OSError as err:
        if not exist_ok or err.errno != errno.EEXIST:
            raise

class PriorityFilter(apt.cache.Filter):
    def __init__(self, priority):
        super(PriorityFilter, self).__init__()
        if priority not in ['essential', 'required', 'important']:
            raise Exception('Unrecognized priority %s' % self.priority)
        self.priority = priority

    def apply(self, pkg):
        if self.priority == 'essential':
            return pkg.essential
        return pkg.candidate.priority.lower() == self.priority

class AptBootstrap(object):
    NEEDED_DIRS = ['etc/apt/apt.conf.d', 'etc/apt/preferences.d',
                   'etc/apt/trusted.gpg.d', 'var/lib/apt/lists/partial',
                   'var/cache/apt/archives/partial', 'var/log/apt',
                   'var/lib/dpkg', 'var/lib/dpkg/updates',
                   'var/lib/dpkg/info']

    def __init__(self, path, suite=DEFAULT_SUITE, url=DEFAULT_URL,
                 components=DEFAULT_COMPONENTS, arch=None,
                 packages=[], keyring=None, required=True,
                 important=True, recommends=True, debug=False,
                 dry_run=False):
        self.path = os.path.abspath(path)
        self.suite = suite
        self.url = url
        self.components = components.split(',')
        self.arch = arch
        self.packages = packages
        self.keyring = keyring
        self.required = required
        self.important = important
        self.recommends = recommends
        self.debug = debug
        self.dry_run = dry_run

        self.mounts = []
        atexit.register(self.umount_all)

        # Use current arch if none specified
        if self.arch is None:
            self.arch = apt_pkg.get_architectures()[0]
            logging.info('Using architecture %s' % self.arch)

        # Use EOS keyring if it exists and none specified
        if self.keyring is None and os.path.exists(DEFAULT_KEYRING):
            self.keyring = DEFAULT_KEYRING
            logging.info('Using keyring %s' % self.keyring)

        # Create needed directories
        for dir in self.NEEDED_DIRS:
            makedirs(os.path.join(self.path, dir), exist_ok=True)

        # Create sources.list
        sources_list = os.path.join(self.path, 'etc/apt/sources.list')
        if not os.path.exists(sources_list):
            with open(sources_list, 'w') as f:
                f.write('deb %s %s %s\n' %(self.url, self.suite,
                                           ' '.join(self.components)))

        # Create empty dpkg status so it looks like there are no
        # packages installed
        self.dpkg_status = os.path.join(self.path, 'var/lib/dpkg/status')
        if not os.path.exists(self.dpkg_status):
            with open(self.dpkg_status, 'w') as f:
                pass

        # Setup configuration
        apt_pkg.config.set('APT::Architecture', self.arch)
        apt_pkg.config.set('Dir', self.path)
        apt_pkg.config.set('DPkg::Chroot-Directory', self.path)
        apt_pkg.config.set('Dir::State::status', self.dpkg_status)
        apt_pkg.config.set('APT::Install-Recommends',
                           str(self.recommends))
        apt_pkg.config.set('Dpkg::Options::', '--force-unsafe-io')
        if self.keyring is not None:
            #apt_pkg.config.set('Dir::Etc::trusted', self.keyring)
            keyring_path = os.path.join(self.path, 'etc/apt/trusted.gpg.d',
                                        os.path.basename(self.keyring))
            if not os.path.exists(keyring_path):
                shutil.copy(self.keyring, keyring_path)
        else:
            # If no keyring is provided, package verification will fail
            apt_pkg.config.set('APT::Get::AllowUnauthenticated', 'true')
        if self.debug:
            apt_pkg.config.set('Debug::pkgDepCache::AutoInstall', 'true')
            apt_pkg.config.set('Debug::pkgProblemResolver', 'true')
            apt_pkg.config.set('Debug::pkgInitConfig', 'true')
            #apt_pkg.config.set('Debug::pkgDPkgPM', 'true')

        # Avoid saving these logs inside the chroot (debootstrap results
        # don't include these either)
        apt_pkg.config.set('Dir::Log::Terminal', '')
        apt_pkg.config.set('Dir::Log::Planner', '')

        self.acquire_progress = \
            apt.progress.text.AcquireProgress(outfile=sys.stderr)
        self.op_progress = \
            apt.progress.text.OpProgress(outfile=sys.stderr)
        self.cache = apt.Cache(progress=self.op_progress)
        self.archive_dir = apt_pkg.config.find_dir('Dir::Cache::archives')

    def mount(self, *args):
        target = args[-1]
        if os.path.ismount(target):
            logging.warning('%s is already mounted' % target)
            return
        logging.info('Mounting %s' % target)
        makedirs(target, exist_ok=True)
        subprocess.check_call(['mount'] + list(args))
        self.mounts.append(target)

    def umount(self, target):
        for index, value in enumerate(self.mounts):
            if value == target:
                logging.info('Unmounting %s' % target)
                subprocess.check_call(['umount', target])
                del self.mounts[index]
                return

        # Not found
        raise Exception('%s was not mounted from here' % target)

    def umount_all(self):
        while len(self.mounts) > 0:
            target = self.mounts[-1]
            logging.info('Unmounting %s' % target)
            subprocess.check_call(['umount', target])
            self.mounts.pop()

    def __del__(self):
        self.umount_all()

    def update(self):
        self.cache.update(self.acquire_progress)
        self.cache.open(progress=self.op_progress)

    def mark_all_packages(self):
        self.mark_priority_packages('essential')
        if self.required:
            self.mark_priority_packages('required')
        if self.important:
            self.mark_priority_packages('important')
        self.mark_requested_packages()

    def mark_priority_packages(self, priority):
        with self.cache.actiongroup():
            print('Adding', priority, 'packages', file=sys.stderr)
            packages = apt.cache.FilteredCache(self.cache)
            packages.set_filter(PriorityFilter(priority))
            for pkg in packages:
                logging.debug('Adding %s package %s' % (priority, pkg.name))
                pkg.mark_install()

            # HACK - we should make this a hard dependency of debconf
            if priority == 'essential':
                self.cache['apt-utils'].mark_install()

    def mark_requested_packages(self):
        with self.cache.actiongroup():
            print('Adding requested packages', file=sys.stderr)
            for name in self.packages:
                pkg = self.cache[name]
                logging.debug('Adding requested package %s' % pkg.name)
                pkg.mark_install()

    def get_packages(self):
        packages = {}
        for pkg in self.cache.get_changes():
            # If this is a multi-arch package, use the fullname with the
            # architecture to match output from dpkg-query.
            multi_arch = pkg.candidate.record.get('Multi-Arch', '')
            if multi_arch == 'same':
                name = pkg.fullname
            else:
                name = pkg.shortname
            version = pkg.candidate.version
            packages[name] = version
        return packages

    def extract_member(self, member, data):
        if len(data) != member.size:
            raise Exception('%s data length %d != size %d'
                            %(member.name, len(data), member.size))
        logging.debug('Extracting %s' % member.name)
        dest = os.path.join(self.path, member.name)
        makedirs(os.path.dirname(dest), exist_ok=True)
        if member.isfile():
            with open(dest, 'wb') as f:
                f.write(data)
        elif member.isdir():
            makedirs(dest, exist_ok=True)
        elif member.issym():
            os.symlink(member.linkname, dest)
        elif member.islnk():
            os.link(os.path.join(self.path, member.linkname), dest)
        elif member.isdev():
            if member.ischr():
                mode = member.mode | stat.S_IFCHR
                device = os.makedev(member.major, member.minor)
            elif member.isblk():
                mode = member.mode | stat.S_IFBLK
                device = os.makedev(member.major, member.minor)
            elif member.isfifo():
                mode = member.mode | stat.S_IFIFO
                device = 0
            else:
                raise Exception('Unexpected device member %s' % member.name)
            os.mknod(dest, mode=mode, device=device)
        else:
            raise Exception("Don't know how to handle %s" % member.name)

        os.lchown(dest, member.uid, member.gid)
        if not member.issym():
            os.chmod(dest, member.mode)
            os.utime(dest, (member.mtime, member.mtime))

    def archive_path(self, pkg):
        candidate = pkg.candidate
        base = '%s_%s_%s.deb' %(pkg.name,
                                apt_pkg.quote_string(candidate.version, ':'),
                                candidate.architecture)
        return os.path.join(self.archive_dir, base)

    def fake_install(self, pkg):
        name = pkg.name
        version = pkg.candidate.version

        logging.debug('Faking installation of %s' % name)
        with open(self.dpkg_status, 'w+') as f:
            f.writelines(['Package: %s\n' % name,
                          'Version: %s\n' % version,
                          'Maintainer: unknown\n',
                          'Status: install ok installed\n\n'])

        info = os.path.join(self.path, 'var/lib/dpkg/info',
                            name + '.list')
        with open(info, 'w+') as f:
            pass

    def dpkg_install(self, pkg):
        archive = self.archive_path(pkg)
        target_archive = os.path.join('/', os.path.relpath(archive,
                                                           self.path))
        cmd = ['chroot', self.path, 'dpkg', '--install',
               '--force-depends', '--force-unsafe-io', target_archive]
        logging.debug('Using dpkg to install %s' % pkg.name)
        subprocess.check_call(cmd)

    def dpkg_unpack(self, pkg):
        archive = self.archive_path(pkg)
        target_archive = os.path.join('/', os.path.relpath(archive,
                                                           self.path))
        cmd = ['chroot', self.path, 'dpkg', '--unpack',
               '--force-depends', '--force-unsafe-io', target_archive]
        logging.debug('Using dpkg to unpack %s' % pkg.name)
        subprocess.check_call(cmd)

    def dpkg_configure_pending(self):
        cmd = ['chroot', self.path, 'dpkg', '--configure',
               '--force-depends', '--pending', '--force-configure-any',
               '--force-unsafe-io']
        logging.debug('Using dpkg to configure packages')
        subprocess.check_call(cmd)

    def makedev(self):
        """Create /dev files like debootstrap"""
        # Device files
        nodes = [('full', 0, 0, 0o666, stat.S_IFCHR, 1, 7),
                 ('null', 0, 0, 0o666, stat.S_IFCHR, 1, 3),
                 ('random', 0, 0, 0o666, stat.S_IFCHR, 1, 8),
                 ('tty', 0, 5, 0o666, stat.S_IFCHR, 5, 0),
                 ('urandom', 0, 0, 0o666, stat.S_IFCHR, 1, 9),
                 ('zero', 0, 0, 0o666, stat.S_IFCHR, 1, 5)]

        # Symlinks
        links = [('fd', '/proc/self/fd'),
                 ('stderr', 'fd/2'),
                 ('stdin', 'fd/0'),
                 ('stdout', 'fd/1')]

        makedirs(os.path.join(self.path, 'dev', 'shm'), exist_ok=True)
        makedirs(os.path.join(self.path, 'dev', 'pts'), exist_ok=True)
        for node in nodes:
            path = os.path.join(self.path, 'dev', node[0])
            if not os.path.exists(path):
                logging.info('Creating device node %s' % path)
                os.mknod(path, node[4], os.makedev(node[5], node[6]))
                os.chmod(path, node[3])
                os.chown(path, node[1], node[2])
        for link in links:
            path = os.path.join(self.path, 'dev', link[0])
            if not os.path.exists(path):
                logging.info('Creating dev symlink %s' % path)
                os.symlink(link[1], path)

        # Inside a container, we might not be allowed to create /dev/ptmx.
        # If not, do the next best thing.
        path = os.path.join(self.path, 'dev', 'ptmx')
        try:
            os.mknod(path, stat.S_IFCHR, os.makedev(5, 2))
        except OSError:
            logging.warning("Could not create /dev/ptmx, falling back to " \
                            "symlink. This chroot will require /dev/pts " \
                            "mounted with ptmxmode=666")
            os.symlink('pts/ptmx', path)

    def stage1(self):
        # Create merged /usr directories
        for dir in ['bin', 'lib', 'sbin', 'lib64']:
            link = os.path.join(self.path, dir)
            usrdir = os.path.join(self.path, 'usr', dir)
            makedirs(usrdir, exist_ok=True)
            if os.path.exists(link):
                if not os.path.islink(link):
                    raise Exception('%s exists but is not a symlink' % link)
                os.unlink(link)
            os.symlink(os.path.join('usr', dir), os.path.join(self.path, dir))

            # Mirror /usr merge to /usr/lib/debug directory
            usrdir = os.path.join(self.path, 'usr', 'lib', 'debug', 'usr', dir)
            link = os.path.join(self.path, 'usr', 'lib', 'debug', dir)
            makedirs(usrdir, exist_ok=True)
            if os.path.exists(link):
                if not os.path.islink(link):
                    raise Exception('%s exists but is not a symlink' % link)
                os.unlink(link)
            os.symlink(os.path.join('usr', dir),
                       os.path.join(self.path, 'usr', 'lib', 'debug', dir))

        self.mark_priority_packages('essential')

        self.cache.fetch_archives(self.acquire_progress)
        for pkg in self.cache.get_changes():
            # Manually extract the debs
            archive = self.archive_path(pkg)
            deb = apt_inst.DebFile(archive)
            logging.info('Extracting %s' % pkg.name)
            deb.data.go(self.extract_member)

        self.fake_install(self.cache['dpkg'])

    def stage2(self):
        os.environ['LC_ALL'] = 'C'
        os.environ['DEBIAN_FRONTEND'] = 'noninteractive'

        self.makedev()
        self.mount('-t', 'proc', 'proc', os.path.join(self.path, 'proc'))
        self.mount('-t', 'sysfs', 'sysfs', os.path.join(self.path, 'sys'))
        self.mount('--bind', '/tmp', os.path.join(self.path, 'tmp'))

        # Random prep copied from debootstrap
        subprocess.check_call(['chroot', self.path, '/sbin/ldconfig'])
        if not os.path.exists(os.path.join(self.path, 'usr/bin/awk')):
            os.symlink('mawk', os.path.join(self.path, 'usr/bin/awk'))
        if not os.path.exists(os.path.join(self.path, 'etc/localtime')):
            os.symlink('/usr/share/zoneinfo/UTC',
                       os.path.join(self.path, 'etc/localtime'))

        print('Installing bootstrap packages')
        early_packages = ['base-passwd', 'base-files', 'dpkg', 'libc6',
                          'perl-base', 'mawk', 'debconf', 'debianutils',
                          'passwd']
        for pkgname in early_packages:
            self.dpkg_install(self.cache[pkgname])

        print('Unpacking essential packages')
        for pkg in self.cache.get_changes():
            self.dpkg_unpack(pkg)

        # Make sure we don't start any daemons in the chroot
        start_stop_daemon = os.path.join(self.path,
                                         'sbin/start-stop-daemon')
        if os.path.exists(start_stop_daemon):
            os.rename(start_stop_daemon, start_stop_daemon + '.REAL')
            os.symlink('/bin/true', start_stop_daemon)
        policy_rc_d = os.path.join(self.path, 'usr/sbin/policy-rc.d')
        with open(policy_rc_d, 'w') as f:
            f.writelines(['#!/bin/sh\n',
                          'exit 101\n'])
        os.chmod(policy_rc_d, 0o755)

        print('Configuring essential packages')
        self.dpkg_configure_pending()

        # Re-open the cache to get updated dpkg status
        self.cache.open(progress=self.op_progress)
        if self.required:
            self.mark_priority_packages('required')
        if self.important:
            self.mark_priority_packages('important')
        self.mark_requested_packages()

        print('Installing remaining packages')
        self.cache.commit(fetch_progress=self.acquire_progress)

        # Restore daemon control tools
        if os.path.exists(start_stop_daemon + '.REAL'):
            os.unlink(start_stop_daemon)
            os.rename(start_stop_daemon + '.REAL', start_stop_daemon)
        os.unlink(policy_rc_d)

        self.umount(os.path.join(self.path, 'sys'))
        self.umount(os.path.join(self.path, 'proc'))
        self.umount(os.path.join(self.path, 'tmp'))

    def bootstrap(self):
        self.update()

        if args.dry_run:
            self.mark_all_packages()
            packages = self.get_packages()
            for pkg, ver in sorted(packages.items()):
                print(pkg, ver, sep='\t')
            return

        self.stage1()
        self.stage2()

        print('Installation complete')

if __name__ == '__main__':
    aparser = ArgumentParser(description='Bootstrap system with APT')
    aparser.add_argument('-n', '--dry-run', action='store_true',
                         help='print packages and exit')
    aparser.add_argument('-a', '--arch', help='target architecture')
    aparser.add_argument('--components', default=DEFAULT_COMPONENTS,
                         help='components from archive to use')
    aparser.add_argument('--packages', default='',
                         help='packages to include')
    aparser.add_argument('--keyring', help='keyring for verification')
    aparser.add_argument('--required', action='store_true',
                         default=True, help='enable required packages')
    aparser.add_argument('--no-required', dest='required',
                         action='store_false',
                         help='disable required packages')
    aparser.add_argument('--important', action='store_true',
                         default=True, help='enable important packages')
    aparser.add_argument('--no-important', dest='important',
                         action='store_false',
                         help='disable important packages')
    aparser.add_argument('--recommends', action='store_true',
                         default=True, help='enable package recommends')
    aparser.add_argument('--no-recommends', dest='recommends',
                         action='store_false',
                         help='disable package recommends')
    aparser.add_argument('-v', '--verbose', action='store_true',
                         help='enable verbose output')
    aparser.add_argument('--debug', action='store_true',
                         help='enable debugging output')
    aparser.add_argument('SUITE', help='archive branch')
    aparser.add_argument('TARGET', help='path to bootstrap')
    aparser.add_argument('MIRROR', nargs='?', default=DEFAULT_URL,
                         help='archive URL')
    args = aparser.parse_args()

    loglevel = logging.WARNING
    if args.verbose:
        loglevel = logging.INFO
    if args.debug:
        loglevel = logging.DEBUG
    logging.basicConfig(format='%(module)s: %(levelname)s: %(message)s',
                        level=loglevel)

    packages = []
    args.packages = args.packages.strip()
    if len(args.packages) > 0:
        packages = args.packages.split(',')

    bootstrap = AptBootstrap(args.TARGET, args.SUITE, args.MIRROR,
                             components=args.components,
                             arch=args.arch,
                             packages=packages,
                             keyring=args.keyring,
                             required=args.required,
                             important=args.important,
                             recommends=args.recommends,
                             debug=args.debug,
                             dry_run=args.dry_run)
    bootstrap.bootstrap()
